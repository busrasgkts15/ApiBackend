// <auto-generated />
using System;
using ApiBackend.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250513131950_MakeUserRoleNullable")]
    partial class MakeUserRoleNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CUser_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MUser_id")
                        .HasColumnType("int");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("totalProduct")
                        .HasColumnType("int");

                    b.HasKey("categoryId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Entities.Product", b =>
                {
                    b.Property<int>("prodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CUser_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MUser_id")
                        .HasColumnType("int");

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<string>("prodDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("prodName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<decimal>("prodPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("prodSertficate")
                        .HasColumnType("longtext");

                    b.HasKey("prodId");

                    b.HasIndex("categoryId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Property<int>("roleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CUser_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MUser_id")
                        .HasColumnType("int");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("roleId");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Entities.Support", b =>
                {
                    b.Property<int>("messageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CUser_id")
                        .HasColumnType("int");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MUser_id")
                        .HasColumnType("int");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("messageDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("replyMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("messageId");

                    b.HasIndex("userId");

                    b.ToTable("supports");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CUser_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MUser_id")
                        .HasColumnType("int");

                    b.Property<string>("e_mail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("passwordHash")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("userId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Entities.UserRole", b =>
                {
                    b.Property<int>("userRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CUser_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MUser_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("registrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("roleId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("userRoleId");

                    b.HasIndex("roleId");

                    b.HasIndex("userId");

                    b.ToTable("userRoles");
                });

            modelBuilder.Entity("Entities.Product", b =>
                {
                    b.HasOne("Entities.Category", "category")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("Entities.Support", b =>
                {
                    b.HasOne("Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Entities.UserRole", b =>
                {
                    b.HasOne("Entities.Role", "role")
                        .WithMany("userRoles")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", "user")
                        .WithMany("userRoles")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Navigation("userRoles");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("userRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
